Microsoft (R) Macro Assembler Version 14.28.29913.0	    06/02/21 21:51:42
"Project 6     (Proj6_pantojaj.asm			     Page 1 - 1


				TITLE Project 6     (Proj6_pantojaj.asm)

				; Author: Jesse Pantoja 
				; Last Modified: 
				; OSU email address: pantojaj@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  6               Due Date: 6/6/2021
				; Description: This file is provided as a template from which you may work
				;              when developing assembly projects in CS271.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)
				mDisplayString MACRO strAddr
				    PUSH    EDX
				    MOV     EDX, strAddr
				    CALL    WriteString
				    POP     EDX
				ENDM

				mGetString MACRO promptAddr, inputStringAddr, maxStrLength, charsReadAddr
				    PUSH    EDX
				    PUSH    ECX
				    PUSH    EDI
				    
				    ; Prompt user (string)
				    mDisplayString promptAddr
				    MOV     ECX, maxStrLength
				    MOV     EDX, inputStringAddr
				    CALL    ReadString
				    ; Copy number of characters read to charsReadAddr variable
				    MOV     EDI, charsReadAddr
				    MOV     [EDI], EAX

				    ; Restore used registers
				    POP     EDI
				    POP     ECX
				    POP     EDX


				ENDM

				; (insert constant definitions here)
 = 0000000D			MAX_STRING_LENGTH = 13   ; Max # of digits in a 32 bit SWORD integer is 10. 11 accounts for sign, 12 for null terminator. 13 is used for length validation.
 = 0000000B			MAX_CHARS_ALLOWED = 11
 = 0000002B			PLUS_SIGN_ASCII = 43
 = 0000002D			MINUS_SIGN_ASCII = 45
 = 00000030			ZERO_ASCII = 48
 = 00000039			NINE_ASCII = 57

 00000000			.data
				    ; Strings
 00000000 50 52 4F 47 52	    header1                 BYTE    "PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures", 13, 10, 0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0D 0A 00
 0000003F 57 72 69 74 74	    header2                 BYTE    "Written by: Jesse Pantoja", 13, 10, 13, 10, 0
	   65 6E 20 62 79
	   3A 20 4A 65 73
	   73 65 20 50 61
	   6E 74 6F 6A 61
	   0D 0A 0D 0A 00
 0000005D 50 6C 65 61 73	    header3                 BYTE    "Please enter 10 signed decimal integers between -2,147,483,648 and 2,147,483,647.", 13, 10, 0
	   65 20 65 6E 74
	   65 72 20 31 30
	   20 73 69 67 6E
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 73 20
	   62 65 74 77 65
	   65 6E 20 2D 32
	   2C 31 34 37 2C
	   34 38 33 2C 36
	   34 38 20 61 6E
	   64 20 32 2C 31
	   34 37 2C 34 38
	   33 2C 36 34 37
	   2E 0D 0A 00
 000000B1 49 20 77 69 6C	    header4                 BYTE    "I will then display a list of the entered integers, their sum, and their average value.", 13, 10,
	   6C 20 74 68 65
	   6E 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 20 6F 66 20
	   74 68 65 20 65
	   6E 74 65 72 65
	   64 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2E 0D 0A 59
	   6F 75 20 6D 61
	   79 20 6F 6E 6C
	   79 20 65 6E 74
	   65 72 20 31 31
	   20 6D 61 78 20
	   63 68 61 72 61
	   63 74 65 72 73
	   20 70 65 72 20
	   69 6E 70 75 74
	   2E 0D 0A 0D 0A
	   00
				                                    "You may only enter 11 max characters per input.", 13, 10, 13, 10, 0
 0000013E 50 6C 65 61 73	    promptUser              BYTE    "Please enter a signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 0000015D 45 52 52 4F 52	    invalidCharAmount       BYTE    "ERROR: You entered too many characters! Try again.", 13, 10, 0
	   3A 20 59 6F 75
	   20 65 6E 74 65
	   72 65 64 20 74
	   6F 6F 20 6D 61
	   6E 79 20 63 68
	   61 72 61 63 74
	   65 72 73 21 20
	   54 72 79 20 61
	   67 61 69 6E 2E
	   0D 0A 00
 00000192 45 52 52 4F 52	    invalidCharAmount2      BYTE    "ERROR: You did not enter any characters! Try again.", 13, 10, 0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 79 20 63
	   68 61 72 61 63
	   74 65 72 73 21
	   20 54 72 79 20
	   61 67 61 69 6E
	   2E 0D 0A 00
 000001C8 45 52 52 4F 52	    invalidIntStr           BYTE    "ERROR: You did not enter a signed decimal number. Try again.", 13, 10, 0 
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 64
	   65 63 69 6D 61
	   6C 20 6E 75 6D
	   62 65 72 2E 20
	   54 72 79 20 61
	   67 61 69 6E 2E
	   0D 0A 00
 00000207 56 61 6C 69 64	    validFirstChar          BYTE    "Valid first char", 13, 10, 0
	   20 66 69 72 73
	   74 20 63 68 61
	   72 0D 0A 00
				    

				    ; Data
 0000021A 00000000		    numCharsInputted        DWORD   ?
 0000021E			    userInputString         BYTE    MAX_STRING_LENGTH DUP(?)
 0000022B 00000000		    userInputNumericVal     SDWORD  ?
 0000022F 00000000		    isNegativeNum           DWORD   0

 00000000			.code
 00000000			main PROC

				; (insert executable instructions here)
 00000000  68 00000000 R	    PUSH    OFFSET header1
 00000005  68 0000003F R	    PUSH    OFFSET header2
 0000000A  68 0000005D R	    PUSH    OFFSET header3
 0000000F  68 000000B1 R	    PUSH    OFFSET header4
 00000014  E8 00000036		    CALL    introduction

				    ; Call Read Val x10 
 00000019  68 0000022F R	    PUSH    OFFSET isNegativeNum
 0000001E  68 0000022B R	    PUSH    OFFSET userInputNumericVal
 00000023  68 000001C8 R	    PUSH    OFFSET invalidIntStr
 00000028  68 00000192 R	    PUSH    OFFSET invalidCharAmount2
 0000002D  68 0000015D R	    PUSH    OFFSET invalidCharAmount
 00000032  68 0000021A R	    PUSH    OFFSET numCharsInputted
 00000037  6A 0D		    PUSH    MAX_STRING_LENGTH
 00000039  68 0000021E R	    PUSH    OFFSET userInputString
 0000003E  68 0000013E R	    PUSH    OFFSET promptUser
 00000043  E8 00000036		    CALL    ReadVal

				    ; IT IS NECESSARY TO RESET isNegativeNum back to 0 after each call to ReadVal


				    Invoke ExitProcess,0	; exit to operating system
 00000048  6A 00	   *	    push   +000000000h
 0000004A  E8 00000000 E   *	    call   ExitProcess
 0000004F			main ENDP

				; (insert additional procedures here)

 0000004F			introduction PROC
				    ; Create stack frame
 0000004F  55			    PUSH    EBP
 00000050  8B EC		    MOV     EBP, ESP

				    mDisplayString [EBP + 20]
 00000052  52		     1	    PUSH    EDX
 00000053  8B 55 14	     1	    MOV     EDX, [EBP + 20]
 00000056  E8 00000000 E     1	    CALL    WriteString
 0000005B  5A		     1	    POP     EDX
				    mDisplayString [EBP + 16]
 0000005C  52		     1	    PUSH    EDX
 0000005D  8B 55 10	     1	    MOV     EDX, [EBP + 16]
 00000060  E8 00000000 E     1	    CALL    WriteString
 00000065  5A		     1	    POP     EDX
				    mDisplayString [EBP + 12]
 00000066  52		     1	    PUSH    EDX
 00000067  8B 55 0C	     1	    MOV     EDX, [EBP + 12]
 0000006A  E8 00000000 E     1	    CALL    WriteString
 0000006F  5A		     1	    POP     EDX
				    mDisplayString [EBP + 8]
 00000070  52		     1	    PUSH    EDX
 00000071  8B 55 08	     1	    MOV     EDX, [EBP + 8]
 00000074  E8 00000000 E     1	    CALL    WriteString
 00000079  5A		     1	    POP     EDX
				    
 0000007A  5D			    POP     EBP
 0000007B  C2 0010		    RET     16
 0000007E			introduction ENDP

 0000007E			ReadVal PROC
 0000007E  55			    PUSH    EBP
 0000007F  8B EC		    MOV     EBP, ESP

				    ; Save Used Registers
 00000081  50			    PUSH    EAX
 00000082  53			    PUSH    EBX
 00000083  51			    PUSH    ECX
 00000084  52			    PUSH    EDX
 00000085  56			    PUSH    ESI
				    
 00000086			_getString:
				    ; Args: promptUser addr, userInputStringAddr addr, MAX_STRING_LENGTH val, numCharsInputted addr
				    mGetString [EBP + 8], [EBP + 12], [EBP + 16], [EBP + 20]
 00000086  52		     1	    PUSH    EDX
 00000087  51		     1	    PUSH    ECX
 00000088  57		     1	    PUSH    EDI
 00000089  52		     2	    PUSH    EDX
 0000008A  8B 55 08	     2	    MOV     EDX, [EBP + 8]
 0000008D  E8 00000000 E     2	    CALL    WriteString
 00000092  5A		     2	    POP     EDX
 00000093  8B 4D 10	     1	    MOV     ECX, [EBP + 16]
 00000096  8B 55 0C	     1	    MOV     EDX, [EBP + 12]
 00000099  E8 00000000 E     1	    CALL    ReadString
 0000009E  8B 7D 14	     1	    MOV     EDI, [EBP + 20]
 000000A1  89 07	     1	    MOV     [EDI], EAX
 000000A3  5F		     1	    POP     EDI
 000000A4  59		     1	    POP     ECX
 000000A5  5A		     1	    POP     EDX
				    
				    ; Debugging
				    ;MOV     EDX, OFFSET userInputString
				    ;CALL    WriteString
				    ;CALL    CrLf
				    ;MOV     EAX, numCharsInputted
				    ;CALL    WriteDec
				    ;CALL    CrLf

				    ; First check if user input string exceeds MAX_CHARS_ALLOWED
				    ; [EBP + 20] = numCharsInputted address
 000000A6  8B 75 14		    MOV     ESI, [EBP + 20]
 000000A9  8B 1E		    MOV     EBX, [ESI]
 000000AB  83 FB 0B		    CMP     EBX, MAX_CHARS_ALLOWED
				    ; If numCharsInputted < 11, jump to next check, else display error and jump back to mGetString
 000000AE  7E 0A		    JLE     _checkForNullString
 000000B0  8B 55 18		    MOV     EDX, [EBP + 24]
 000000B3  E8 00000000 E	    CALL    WriteString
 000000B8  EB CC		    JMP     _getString

				    ; Check if user input is empty, i.e. bytes read = 0. Display error if so. Else, go to next check
 000000BA			_checkForNullString:
 000000BA  83 FB 00		    CMP     EBX, 0
 000000BD  7F 0A		    JG      _checkForValidFirstChar
 000000BF  8B 55 1C		    MOV     EDX, [EBP + 28]
 000000C2  E8 00000000 E	    CALL    WriteString
 000000C7  EB BD		    JMP     _getString
				 
				    ; Check that first character is a +, -, or digit character
 000000C9			_checkForValidFirstChar:
 000000C9  FC			    CLD
				    ; Change ESI from num of chars inputted to inputStringAddress 
 000000CA  8B 75 0C		    MOV ESI, [EBP + 12]
				    ; Copy first char of userInput into AL
 000000CD  AC			    LODSB

				    ; AL must be 43 OR 45 OR (48 <= AL <= 57)
 000000CE  3C 2B		    CMP AL, PLUS_SIGN_ASCII
				    ; Check that theres more than 1 char before confirming valid input
 000000D0  74 16		    JE  _checkMoreThanOneChar

 000000D2  3C 2D		    CMP AL, MINUS_SIGN_ASCII
				    ; Check that theres more than 1 char before confirming valid input
 000000D4  74 12		    JE  _checkMoreThanOneChar

				    ; If AL val < 48 (0), first char must be invalid, else check if val > 57 (9)
 000000D6  3C 30		    CMP AL, ZERO_ASCII
 000000D8  7C 04		    JL  _stringInvalid

				    ; If AL val <= NINE_ASCII, then first char at this point is valid
 000000DA  3C 39		    CMP AL, NINE_ASCII
 000000DC  7E 14		    JLE _firstCharValid

				    ; Output error string and ask for input again
 000000DE			_stringInvalid:
 000000DE  8B 55 20		    MOV     EDX, [EBP + 32]
 000000E1  E8 00000000 E	    CALL    WriteString
 000000E6  EB 9E		    JMP     _getString

				    ; If first char is a + or - char, we must also check that there is more than one char
 000000E8			_checkMoreThanOneChar:
				    ; [EBP + 20] = numCharsInputted Address
 000000E8  8B 4D 14		    MOV     ECX, [EBP + 20]
 000000EB  8B 19		    MOV     EBX, [ECX]
				    ; If numCharsInputted value = 1, first char is valid but no valid number was inputted. Else, input is valid.
 000000ED  83 FB 01		    CMP     EBX, 1
 000000F0  74 EC		    JE      _stringInvalid
				   
				   ; ABOVE CODE FUNCTIONAL, LAST AREA WORKED ON BELOW
 000000F2			_firstCharValid:
				    ; Check current val in AL (first val). 
 000000F2  3C 2B		    CMP     AL, PLUS_SIGN_ASCII
 000000F4  74 1D		    JE      _loopPreconditions

 000000F6  3C 2D		    CMP     AL, MINUS_SIGN_ASCII
 000000F8  75 10		    JNE      _firstCharIsDigit
				    ; First char is a minus sign, set isNegativeNum to 1
 000000FA  56			    PUSH    ESI
 000000FB  57			    PUSH    EDI
				    ; [EBP + 40] = isNegativeNum variable address
 000000FC  8B 7D 28		    MOV     EDI, [EBP + 40]
 000000FF  BE 00000001		    MOV     ESI, 1
				    ; Set isNegativeNum = 1 because first character is a negative sign
 00000104  89 37		    MOV     [EDI], ESI
 00000106  5F			    POP     EDI
 00000107  5E			    POP     ESI
 00000108  EB 09		    JMP     _loopPreconditions

				  ; Else, first char is a digit. Need to take it into account outside of loop for conversion to an int
				  ; Since userInputNumericVal starts up building from 0, the variable will always be set = first digit val (10* 0 + (ascii code - 48))
 0000010A			_firstCharIsDigit:
 0000010A  56			    PUSH    ESI
				    ;[EBP + 36] = userInputNumericVal address, save address in ESI
 0000010B  8B 75 24		    MOV     ESI, [EBP + 36]
 0000010E  2C 30		    SUB     AL, 48
 00000110  89 06		    MOV     [ESI], EAX
 00000112  5E			    POP     ESI

 00000113			_loopPreconditions:
 00000113  56			    PUSH    ESI
 00000114  8B 75 14		    MOV     ESI, [EBP + 20]
 00000117  8B 0E		    MOV     ECX, [ESI]
				    ; ECX should equal numCharsInputted - 1 as first character already accounted for
 00000119  49			    DEC     ECX
 0000011A  8B 1E		    MOV     EBX, [ESI]
				    ; If numCharsInputted >= 10, we will need to stop at second to last digit to determine if final number fits in 32 bit reg
 0000011C  5E			    POP     ESI
 0000011D  83 FB 0A		    CMP     EBX, 10
 00000120  7C 01		    JL      _startLoop
 00000122  49			    DEC     ECX
				    
 00000123			_startLoop:
 00000123  AC			    LODSB
				    ; precondition to first check that current char is a digit. Break out if not. 
				    ; If AL val < 48 (0), first char must be invalid, else check if val > 57 (9)
 00000124  3C 30		    CMP AL, ZERO_ASCII
 00000126  7C B6		    JL  _stringInvalid

				    ; If AL val <= NINE_ASCII, then first char at this point is valid
 00000128  3C 39		    CMP AL, NINE_ASCII
 0000012A  7F B2		    JG _stringInvalid

				    ; User formula userNumericVal = 10 * userNumericVal + (ASCII CODE - 48)
 0000012C  56			    PUSH    ESI
 0000012D  57			    PUSH    EDI
 0000012E  53			    PUSH    EBX

				    ; [EBP + 36] = userNumericVal address, save address in ESI
 0000012F  8B 75 24		    MOV     ESI, [EBP + 36]
				    ; Move current userNumericVal immediate val into EDI
 00000132  8B 3E		    MOV     EDI, [ESI]
				    ; Move 10 into EAX to prep 10*userNumericVal (this move replaces old ASCII value in EAX, must restore before using ASCII val again)
 00000134  50			    PUSH    EAX
 00000135  B8 0000000A		    MOV     EAX, 10
				    ; Result in EAX
 0000013A  F7 E7		    MUL     EDI
				    ; Save 10*userNumericVal from EAX to EBX
 0000013C  8B D8		    MOV     EBX, EAX
				    ; Current character's ASCII code - 48
 0000013E  58			    POP     EAX
 0000013F  2C 30		    SUB     AL, 48
				    ; Final result in EBX, save this new value in userNumericVal
 00000141  03 D8		    ADD     EBX, EAX
 00000143  89 1E		    MOV     [ESI], EBX
 00000145  5B			    POP     EBX
 00000146  5F			    POP     EDI
 00000147  5E			    POP     ESI
				    
 00000148  E2 D9		    LOOP    _startLoop



				        ; a condition needs to exist after loop to check the sign of the number so that if it was negative input, final num should be negative. 




 0000014A			ReadVal ENDP


				END main
Microsoft (R) Macro Assembler Version 14.28.29913.0	    06/02/21 21:51:42
"Project 6     (Proj6_pantojaj.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000233 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000014A Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 0000007E _TEXT	Length= 000000CC Public STDCALL
  _getString . . . . . . . . . .	L Near	 00000086 _TEXT	
  _checkForNullString  . . . . .	L Near	 000000BA _TEXT	
  _checkForValidFirstChar  . . .	L Near	 000000C9 _TEXT	
  _stringInvalid . . . . . . . .	L Near	 000000DE _TEXT	
  _checkMoreThanOneChar  . . . .	L Near	 000000E8 _TEXT	
  _firstCharValid  . . . . . . .	L Near	 000000F2 _TEXT	
  _firstCharIsDigit  . . . . . .	L Near	 0000010A _TEXT	
  _loopPreconditions . . . . . .	L Near	 00000113 _TEXT	
  _startLoop . . . . . . . . . .	L Near	 00000123 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
introduction . . . . . . . . . .	P Near	 0000004F _TEXT	Length= 0000002F Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000004F Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_CHARS_ALLOWED  . . . . . . .	Number	 0000000Bh   
MAX_STRING_LENGTH  . . . . . . .	Number	 0000000Dh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MINUS_SIGN_ASCII . . . . . . . .	Number	 0000002Dh   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NINE_ASCII . . . . . . . . . . .	Number	 00000039h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PLUS_SIGN_ASCII  . . . . . . . .	Number	 0000002Bh   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
ZERO_ASCII . . . . . . . . . . .	Number	 00000030h   
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
header1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
header2  . . . . . . . . . . . .	Byte	 0000003F _DATA	
header3  . . . . . . . . . . . .	Byte	 0000005D _DATA	
header4  . . . . . . . . . . . .	Byte	 000000B1 _DATA	
invalidCharAmount2 . . . . . . .	Byte	 00000192 _DATA	
invalidCharAmount  . . . . . . .	Byte	 0000015D _DATA	
invalidIntStr  . . . . . . . . .	Byte	 000001C8 _DATA	
isNegativeNum  . . . . . . . . .	DWord	 0000022F _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numCharsInputted . . . . . . . .	DWord	 0000021A _DATA	
promptUser . . . . . . . . . . .	Byte	 0000013E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
userInputNumericVal  . . . . . .	DWord	 0000022B _DATA	
userInputString  . . . . . . . .	Byte	 0000021E _DATA	
validFirstChar . . . . . . . . .	Byte	 00000207 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
