Microsoft (R) Macro Assembler Version 14.28.29913.0	    06/06/21 02:48:31
"Project 6     (Proj6_pantojaj.asm			     Page 1 - 1


				TITLE Project 6     (Proj6_pantojaj.asm)

				; Author: Jesse Pantoja 
				; Last Modified: 
				; OSU email address: pantojaj@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  6               Due Date: 6/6/2021
				; Description: This file is provided as a template from which you may work
				;              when developing assembly projects in CS271.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; --------------------------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Writes a passed string (from address) to terminal.
				;
				; Preconditions: Do not use EDX as arguments
				;
				; Receives:
				;       strAddr = the starting address of the string to output
				; 
				; 
				; --------------------------------------------------------------------------------------------------
				mDisplayString MACRO strAddr
				    PUSH    EDX
				    MOV     EDX, strAddr
				    CALL    WriteString
				    POP     EDX
				ENDM


				; --------------------------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Prompts the user to enter an integer as a string, then reads and saves the input string to memory. Uses Irvine
				; library ReadString 
				;
				; Preconditions: Do not use EDX, ECX, or EDI as arguments
				;
				; Receives:
				;       promptAddr = The address of the string giving instructions to the user to enter a number
				;       inputStringAddr = The address to save the user's input to. 
				;       maxStrLength = an immediate value denoting the max number of bytes to read from the user
				;       charsReadAddr = the address of a data variable to save the number of bytes read from the user's input.
				;
				; --------------------------------------------------------------------------------------------------
				mGetString MACRO promptAddr, inputStringAddr, maxStrLength, charsReadAddr
				    ; Save used registers
				    PUSH    EDX
				    PUSH    ECX
				    PUSH    EDI
				    
				    ; Prompt user (string)
				    mDisplayString promptAddr
				    
				    ; ReadString preconditions
				    MOV     ECX, maxStrLength
				    MOV     EDX, inputStringAddr
				    CALL    ReadString
				    ; Copy number of characters read to charsReadAddr variable
				    MOV     EDI, charsReadAddr
				    MOV     [EDI], EAX

				    ; Restore used registers
				    POP     EDI
				    POP     ECX
				    POP     EDX
				ENDM

 = 0000000D			MAX_STRING_LENGTH = 13   ; Max # of digits in a 32 bit SWORD integer is 10. 11 accounts for sign, 12 for null terminator. 13 is used for length validation.
 = 0000000B			MAX_CHARS_ALLOWED = 11
 = 0000002B			PLUS_SIGN_ASCII = 43
 = 0000002D			MINUS_SIGN_ASCII = 45
 = 00000030			ZERO_ASCII = 48
 = 00000039			NINE_ASCII = 57
 = 00000001			NEGATIVE = 1
 = 00000000			POSITIVE = 0

 00000000			.data
				    ; Output strings
 00000000 50 52 4F 47 52	    header1                 BYTE    "PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures", 13, 10, 0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0D 0A 00
 0000003F 57 72 69 74 74	    header2                 BYTE    "Written by: Jesse Pantoja", 13, 10, 13, 10, 0
	   65 6E 20 62 79
	   3A 20 4A 65 73
	   73 65 20 50 61
	   6E 74 6F 6A 61
	   0D 0A 0D 0A 00
 0000005D 50 6C 65 61 73	    header3                 BYTE    "Please enter 10 signed decimal integers between -2,147,483,648 and 2,147,483,647.", 13, 10, 0
	   65 20 65 6E 74
	   65 72 20 31 30
	   20 73 69 67 6E
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 73 20
	   62 65 74 77 65
	   65 6E 20 2D 32
	   2C 31 34 37 2C
	   34 38 33 2C 36
	   34 38 20 61 6E
	   64 20 32 2C 31
	   34 37 2C 34 38
	   33 2C 36 34 37
	   2E 0D 0A 00
 000000B1 49 20 77 69 6C	    header4                 BYTE    "I will then display a list of the entered integers, their sum, and their average value.", 13, 10,
	   6C 20 74 68 65
	   6E 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 20 6F 66 20
	   74 68 65 20 65
	   6E 74 65 72 65
	   64 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2E 0D 0A 59
	   6F 75 20 6D 61
	   79 20 6F 6E 6C
	   79 20 65 6E 74
	   65 72 20 31 31
	   20 6D 61 78 20
	   63 68 61 72 61
	   63 74 65 72 73
	   20 70 65 72 20
	   69 6E 70 75 74
	   2E 0D 0A 0D 0A
	   00
				                                    "You may only enter 11 max characters per input.", 13, 10, 13, 10, 0
 0000013E 50 6C 65 61 73	    promptUser              BYTE    "Please enter a signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 0000015D 45 52 52 4F 52	    invalidCharAmount       BYTE    "ERROR: You entered too many characters! Try again.", 13, 10, 0
	   3A 20 59 6F 75
	   20 65 6E 74 65
	   72 65 64 20 74
	   6F 6F 20 6D 61
	   6E 79 20 63 68
	   61 72 61 63 74
	   65 72 73 21 20
	   54 72 79 20 61
	   67 61 69 6E 2E
	   0D 0A 00
 00000192 45 52 52 4F 52	    invalidCharAmount2      BYTE    "ERROR: You did not enter any characters! Try again.", 13, 10, 0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 79 20 63
	   68 61 72 61 63
	   74 65 72 73 21
	   20 54 72 79 20
	   61 67 61 69 6E
	   2E 0D 0A 00
 000001C8 45 52 52 4F 52	    invalidIntStr           BYTE    "ERROR: You did not enter a signed decimal number. Try again.", 13, 10, 0 
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 64
	   65 63 69 6D 61
	   6C 20 6E 75 6D
	   62 65 72 2E 20
	   54 72 79 20 61
	   67 61 69 6E 2E
	   0D 0A 00
 00000207 59 6F 75 20 65	    numbersInputtedStr      BYTE    "You entered the following numbers:", 13, 10, 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00
 0000022C 54 68 65 20 73	    sumOfNumbersStr         BYTE    "The sum of these numbers is: ", 0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 0000024A 54 68 65 20 72	    roundedAverageStr       BYTE    "The rounded average is: ", 0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 00000263 2C 20 00		    commaSpacing            BYTE    ", ", 0
 00000266 54 68 61 6E 6B	    farewellStr             BYTE    "Thanks for playing!", 0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00
 0000027A 54 68 65 20 6E	    overflowString          BYTE    "The number you entered is too large for a 32 bit register.", 13, 10, 0
	   75 6D 62 65 72
	   20 79 6F 75 20
	   65 6E 74 65 72
	   65 64 20 69 73
	   20 74 6F 6F 20
	   6C 61 72 67 65
	   20 66 6F 72 20
	   61 20 33 32 20
	   62 69 74 20 72
	   65 67 69 73 74
	   65 72 2E 0D 0A
	   00

				    

				    ; Data
 000002B7 00000000		    numCharsInputted        DWORD   ?
 000002BB  0000000D [		    userInputString         BYTE    MAX_STRING_LENGTH DUP(?)
	    00
	   ]
 000002C8 00000000		    userInputNumericVal     SDWORD  ?
 000002CC 00000000		    isNegativeNum           DWORD   0
 000002D0 00000000		    totalSum                SDWORD  0
 000002D4  0000000B [		    writevalOutputString    BYTE    11 DUP(0)
	    00
	   ]
 000002DF 00			    commaCounter            BYTE    0
 000002E0 00000000		    roundedAverageInt       SDWORD  ?
				    

				    ; Array
 000002E4  0000000B [		    userIntegersArray       SDWORD  11 DUP(?)
	    00000000
	   ]

 00000000			.code
 00000000			main PROC


 00000000  68 00000000 R	    PUSH    OFFSET header1
 00000005  68 0000003F R	    PUSH    OFFSET header2
 0000000A  68 0000005D R	    PUSH    OFFSET header3
 0000000F  68 000000B1 R	    PUSH    OFFSET header4
 00000014  E8 00000133		    CALL    introduction


				; -----------------------------------------------------------
				; Calls ReadVal ten times. Each call to ReadVal asks for string input
				; from the user and returns an integer in userNumericVal. Once procedure returns,
				; the value returned is appended to userIntegersArray.
				;
				; -----------------------------------------------------------
				    ; _getIntegers loop preconditions
 00000019  B9 0000000A		    MOV     ECX, 10
 0000001E  BE 000002E4 R	    MOV     ESI, OFFSET userIntegersArray
 00000023			_getIntegers:
				    ; Call Read Val x10 
 00000023  68 0000027A R	    PUSH    OFFSET overflowString
 00000028  68 000002CC R	    PUSH    OFFSET isNegativeNum
 0000002D  68 000002C8 R	    PUSH    OFFSET userInputNumericVal
 00000032  68 000001C8 R	    PUSH    OFFSET invalidIntStr
 00000037  68 00000192 R	    PUSH    OFFSET invalidCharAmount2
 0000003C  68 0000015D R	    PUSH    OFFSET invalidCharAmount
 00000041  68 000002B7 R	    PUSH    OFFSET numCharsInputted
 00000046  6A 0D		    PUSH    MAX_STRING_LENGTH
 00000048  68 000002BB R	    PUSH    OFFSET userInputString
 0000004D  68 0000013E R	    PUSH    OFFSET promptUser
 00000052  E8 00000124		    CALL    ReadVal

				    ; ReadVal returns value in userInputNumericVal, move it into current array address
 00000057  8B 1D 000002C8 R	    MOV     EBX, userInputNumericVal
 0000005D  89 1E		    MOV     [ESI], EBX
 0000005F  83 C6 04		    ADD     ESI, TYPE userIntegersArray
				    
 00000062  E2 BF		    LOOP    _getIntegers

				; -----------------------------------------------------------
				;  Calculate the sum of the 10 saved values in userIntegersArray
				; (saved in totalSum)
				; -----------------------------------------------------------

				    ; Calculate sum of the obtained integers in array
 00000064  68 000002D0 R	    PUSH    OFFSET totalSum
 00000069  68 000002E4 R	    PUSH    OFFSET userIntegersArray
 0000006E  E8 0000028F		    CALL    calculateSum

				; -----------------------------------------------------------
				; Output to the terminal each SDWORD integer in userIntegersArray
				; to its string form using WriteVal. Because there are 10 integers in the array,
				; call WriteVal 10 times.
				;
				; -----------------------------------------------------------

				    ; Display "You entered following numbers:" string
 00000073  E8 00000000 E	    CALL    CrLf
 00000078  E8 00000000 E	    CALL    CrLf
				    mDisplayString OFFSET numbersInputtedStr
 0000007D  52		     1	    PUSH    EDX
 0000007E  BA 00000207 R     1	    MOV     EDX, OFFSET numbersInputtedStr
 00000083  E8 00000000 E     1	    CALL    WriteString
 00000088  5A		     1	    POP     EDX

				    ; Call WriteVal 10 times, each time pushing a value from userIntegersArray. 
				    ; Reset isNegativeNum to false
 00000089  BE 000002E4 R	    MOV     ESI, OFFSET userIntegersArray
 0000008E  B9 0000000A		    MOV     ECX, 10

 00000093			_displayIntsAsStrings:
 00000093  6A 0B		    PUSH    SIZEOF writevalOutputString
 00000095  68 000002CC R	    PUSH    OFFSET isNegativeNum
 0000009A  68 000002D4 R	    PUSH    OFFSET writevalOutputString
				    ; Push VALUE at current address of userIntegersArray
 0000009F  FF 36		    PUSH    [ESI]
 000000A1  E8 00000285		    CALL    WriteVal
 000000A6  83 C6 04		    ADD     ESI, 4

 000000A9  80 3D 000002DF R	    CMP     commaCounter, 9
	   09
 000000B0  74 12		    JE      _writevalLoopInstruction
				    mDisplayString OFFSET commaSpacing
 000000B2  52		     1	    PUSH    EDX
 000000B3  BA 00000263 R     1	    MOV     EDX, OFFSET commaSpacing
 000000B8  E8 00000000 E     1	    CALL    WriteString
 000000BD  5A		     1	    POP     EDX
 000000BE  FE 05 000002DF R	    INC     commaCounter
 000000C4			_writevalLoopInstruction:
 000000C4  E2 CD		    LOOP    _displayIntsAsStrings

				; -----------------------------------------------------------
				; Using WriteVal, output the totalSum SDWORD integer value in its string
				; representation obtained; by calling calculateSum above. Then calculate 
				; the rouned average and output that SDWORD integer value in its string representation
				; using WriteVal as well.
				;
				; -----------------------------------------------------------

				    ; Output sum strings
 000000C6  E8 00000000 E	    CALL    CrLf
 000000CB  E8 00000000 E	    CALL    CrLf
				    mDisplayString OFFSET sumOfNumbersStr
 000000D0  52		     1	    PUSH    EDX
 000000D1  BA 0000022C R     1	    MOV     EDX, OFFSET sumOfNumbersStr
 000000D6  E8 00000000 E     1	    CALL    WriteString
 000000DB  5A		     1	    POP     EDX

 000000DC  6A 0B		    PUSH    SIZEOF writevalOutputString
 000000DE  68 000002CC R	    PUSH    OFFSET isNegativeNum
 000000E3  68 000002D4 R	    PUSH    OFFSET writevalOutputString
 000000E8  FF 35 000002D0 R	    PUSH    totalSum
 000000EE  E8 00000238		    CALL    WriteVal

				    ; Calculate rounded average
 000000F3  68 000002D0 R	    PUSH    OFFSET totalSum
 000000F8  68 000002E0 R	    PUSH    OFFSET roundedAverageInt
 000000FD  E8 000002AB		    CALL    calculateRoundedAverage

				    ; Display rounded average
 00000102  E8 00000000 E	    CALL    CrLf
 00000107  E8 00000000 E	    CALL    CrLf
				    mDisplayString OFFSET roundedAverageStr
 0000010C  52		     1	    PUSH    EDX
 0000010D  BA 0000024A R     1	    MOV     EDX, OFFSET roundedAverageStr
 00000112  E8 00000000 E     1	    CALL    WriteString
 00000117  5A		     1	    POP     EDX
				    
 00000118  6A 0B		    PUSH    SIZEOF writevalOutputString
 0000011A  68 000002CC R	    PUSH    OFFSET isNegativeNum
 0000011F  68 000002D4 R	    PUSH    OFFSET writevalOutputString
 00000124  FF 35 000002E0 R	    PUSH    roundedAverageInt
 0000012A  E8 000001FC		    CALL    WriteVal

				; -----------------------------------------------------------
				; Display a farewell message.
				;
				; -----------------------------------------------------------

				    ; Display farewell
 0000012F  E8 00000000 E	    CALL    CrLf
 00000134  E8 00000000 E	    CALL    CrLf
				    mDisplayString OFFSET farewellStr
 00000139  52		     1	    PUSH    EDX
 0000013A  BA 00000266 R     1	    MOV     EDX, OFFSET farewellStr
 0000013F  E8 00000000 E     1	    CALL    WriteString
 00000144  5A		     1	    POP     EDX



				    Invoke ExitProcess,0	; exit to operating system
 00000145  6A 00	   *	    push   +000000000h
 00000147  E8 00000000 E   *	    call   ExitProcess
 0000014C			main ENDP

				; --------------------------------------------------------------------------------------------------
				; Name: introduction
				;
				; Outputs program header and instructions for user strings to the terminal. Uses mDisplayString macro
				; to output strings.
				;
				; Receives:
				;    [EBP + 20] = header1 address. Program title string.
				;    [EBP + 16] = header2 address. "Programmed by.." string 
				;    [EBP + 12] = header3 address. String describing what the user should be inputting
				;    [EBP + 8] = header4 address. String describing what the program will output
				;
				; --------------------------------------------------------------------------------------------------
 0000014C			introduction PROC
				    ; Create stack frame
 0000014C  55			    PUSH    EBP
 0000014D  8B EC		    MOV     EBP, ESP

				    mDisplayString [EBP + 20]
 0000014F  52		     1	    PUSH    EDX
 00000150  8B 55 14	     1	    MOV     EDX, [EBP + 20]
 00000153  E8 00000000 E     1	    CALL    WriteString
 00000158  5A		     1	    POP     EDX
				    mDisplayString [EBP + 16]
 00000159  52		     1	    PUSH    EDX
 0000015A  8B 55 10	     1	    MOV     EDX, [EBP + 16]
 0000015D  E8 00000000 E     1	    CALL    WriteString
 00000162  5A		     1	    POP     EDX
				    mDisplayString [EBP + 12]
 00000163  52		     1	    PUSH    EDX
 00000164  8B 55 0C	     1	    MOV     EDX, [EBP + 12]
 00000167  E8 00000000 E     1	    CALL    WriteString
 0000016C  5A		     1	    POP     EDX
				    mDisplayString [EBP + 8]
 0000016D  52		     1	    PUSH    EDX
 0000016E  8B 55 08	     1	    MOV     EDX, [EBP + 8]
 00000171  E8 00000000 E     1	    CALL    WriteString
 00000176  5A		     1	    POP     EDX
				    
 00000177  5D			    POP     EBP
 00000178  C2 0010		    RET     16
 0000017B			introduction ENDP

				; --------------------------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Uses mGetString macro to get a single, valid signed number (as a string) from the user. The procedure
				; will continuously ask for input until valid input is entered. Valid input are strings that start with
				; a digit, +, or -; strings that fit inside a 32 bit register; strings with no other characters but
				; digits after the first character; non-empty strings. ReadVal will takes a valid input (as a string) and
				; convert it to an SDWORD integer and outputs that integer into SDWORD userNumericVal.
				; 
				; Postconditions: None. All registers are restored before and after procedure call.
				;
				; Receives:
				;    [EBP + 44] = overflowString. Address of string to output to terminal when user entered a number to big for a 32bit reg.
				;    [EBP + 40] = isNegativeNum boolean address. input/output param to denote if the user's input is a negative number. 
				;    [EBP + 36] = userInputNumericVal data output parameter. When ReadVal converts a valid input to a SDWORD integer,
				;                 it outputs the value at this address. 
				;    [EBP + 32] = invalidIntStr. Address of string to output to terminal when user did not enter a signed number.
				;    [EBP + 28] = invalidCharAmount2. Address of string to output to terminal when inputted string is empty.
				;    [EBP + 24] = invalidCharAmount. Address of string to output to terminal when inputted string has too many characters.
				;    [EBP + 20] = numCharsInputted data address as output param. Used as arg for mGetString and later for string validation. 
				;                 numCharsInputted value is the integer number of characters inputted by the user.
				;    [EBP + 16] = MAX_STRING_LENGTH immediate value. Used as mGetString argument and for string validation.
				;    [EBP + 12] = userInputString data output address. mGetString receives this address to write the user's string input at said address.
				;    [EBP + 8] = promptUser string address. String outputted to prompt user to enter a signed number.
				;    MAX_CHARS_ALLOWED, ZERO_ASCII, NINE_ASCII, PLUS_SIGN_ASCII, MINUS_SIGN_ASCII, POSITIVE are global constants.
				;
				;   Returns:
				;       userInputString: Data variable always modified for every call to ReadVal. Used as an input/output parameter
				;                       to save the user's inputted string as an array of bytes. Every call to ReadVal overwrites previous strings in the variable, if any. 
				;       numCharsInputted: Data variable always modified for every call to ReadVal. Used as an input/output parameter
				;                         to save the number of characters the user inputted when mGetString macro is invoked within procedure.
				;                         Every call to ReadVal overwrites previous value, if any. 
				;       userInputNumericVal: ReadVal's primary output. This variable will hold the integer SDWORD type after ReadVal
				;                           converts the user's string to integer. 
				;       isNegativeNum: May be modified in a ReadVal call, but is always restored before procedure returns. 
				;
				;
				; --------------------------------------------------------------------------------------------------
 0000017B			ReadVal PROC
 0000017B  55			    PUSH    EBP
 0000017C  8B EC		    MOV     EBP, ESP

				    ; Save Used Registers
 0000017E  50			    PUSH    EAX
 0000017F  53			    PUSH    EBX
 00000180  51			    PUSH    ECX
 00000181  52			    PUSH    EDX
 00000182  56			    PUSH    ESI
				    
 00000183			_getString:
				    ; Reset isNegativeNum variable to positive
 00000183  8B 7D 28		    MOV     EDI, [EBP + 40]
 00000186  BB 00000000		    MOV     EBX, 0
 0000018B  89 1F		    MOV     [EDI], EBX
				    ; Reset userNumericVal to 0
 0000018D  8B 7D 24		    MOV     EDI, [EBP + 36]
 00000190  BB 00000000		    MOV     EBX, 0
 00000195  89 1F		    MOV     [EDI], EBX

				    ; Args: promptUser addr, userInputStringAddr addr, MAX_STRING_LENGTH val, numCharsInputted addr
				    mGetString [EBP + 8], [EBP + 12], [EBP + 16], [EBP + 20]
 00000197  52		     1	    PUSH    EDX
 00000198  51		     1	    PUSH    ECX
 00000199  57		     1	    PUSH    EDI
 0000019A  52		     2	    PUSH    EDX
 0000019B  8B 55 08	     2	    MOV     EDX, [EBP + 8]
 0000019E  E8 00000000 E     2	    CALL    WriteString
 000001A3  5A		     2	    POP     EDX
 000001A4  8B 4D 10	     1	    MOV     ECX, [EBP + 16]
 000001A7  8B 55 0C	     1	    MOV     EDX, [EBP + 12]
 000001AA  E8 00000000 E     1	    CALL    ReadString
 000001AF  8B 7D 14	     1	    MOV     EDI, [EBP + 20]
 000001B2  89 07	     1	    MOV     [EDI], EAX
 000001B4  5F		     1	    POP     EDI
 000001B5  59		     1	    POP     ECX
 000001B6  5A		     1	    POP     EDX

				    ; First check if user input string exceeds MAX_CHARS_ALLOWED
				    ; [EBP + 20] = numCharsInputted address
 000001B7  8B 75 14		    MOV     ESI, [EBP + 20]
 000001BA  8B 1E		    MOV     EBX, [ESI]
 000001BC  83 FB 0B		    CMP     EBX, MAX_CHARS_ALLOWED
				    ; If numCharsInputted < 11, jump to next check, else display error and ask for another input.
 000001BF  7E 0C		    JLE     _checkForNullString
				    mDisplayString [EBP + 24]
 000001C1  52		     1	    PUSH    EDX
 000001C2  8B 55 18	     1	    MOV     EDX, [EBP + 24]
 000001C5  E8 00000000 E     1	    CALL    WriteString
 000001CA  5A		     1	    POP     EDX
 000001CB  EB B6		    JMP     _getString

				    ; Check if user input is empty, i.e. bytes read = 0. Display error if so. Else, go to next check
 000001CD			_checkForNullString:
 000001CD  83 FB 00		    CMP     EBX, 0
 000001D0  7F 0C		    JG      _checkForValidFirstChar
				    mDisplayString [EBP + 28]
 000001D2  52		     1	    PUSH    EDX
 000001D3  8B 55 1C	     1	    MOV     EDX, [EBP + 28]
 000001D6  E8 00000000 E     1	    CALL    WriteString
 000001DB  5A		     1	    POP     EDX
 000001DC  EB A5		    JMP     _getString
				 
				    ; Check that first character is valid. I.e. a +, -, or digit character. Use LODSB from beginning of string
 000001DE			_checkForValidFirstChar:
 000001DE  FC			    CLD
				    ; Change ESI from num of chars inputted to inputStringAddress 
 000001DF  8B 75 0C		    MOV     ESI, [EBP + 12]
				    ; Copy first char of userInput into AL
 000001E2  AC			    LODSB

				    ; AL byte value must be ASCIIs 43 OR 45 OR (48 <= AL <= 57)
 000001E3  3C 2B		    CMP     AL, PLUS_SIGN_ASCII
				    ; If first char is plus sign, check that theres more than 1 char before confirming valid input
 000001E5  74 18		    JE      _checkMoreThanOneChar

 000001E7  3C 2D		    CMP     AL, MINUS_SIGN_ASCII
				    ; If first char is minus sign, check that theres more than 1 char before confirming valid input
 000001E9  74 14		    JE      _checkMoreThanOneChar

				    ; If AL val < 48 (ASCII for 0), first char must be invalid, else check if val > 57 (ASCII for 9)
 000001EB  3C 30		    CMP     AL, ZERO_ASCII
 000001ED  7C 04		    JL      _stringInvalid

				    ; If AL val <= NINE_ASCII, then first char must be valid at this point
 000001EF  3C 39		    CMP     AL, NINE_ASCII
 000001F1  7E 16		    JLE     _firstCharValid

				    ; Output error string and ask for input again
 000001F3			_stringInvalid:
				    mDisplayString [EBP + 32]
 000001F3  52		     1	    PUSH    EDX
 000001F4  8B 55 20	     1	    MOV     EDX, [EBP + 32]
 000001F7  E8 00000000 E     1	    CALL    WriteString
 000001FC  5A		     1	    POP     EDX
 000001FD  EB 84		    JMP     _getString

				    ; If first char is a + or - char, we must also check that there is more than one char
 000001FF			_checkMoreThanOneChar:
				    ; [EBP + 20] = numCharsInputted Address
 000001FF  8B 4D 14		    MOV     ECX, [EBP + 20]
 00000202  8B 19		    MOV     EBX, [ECX]
				    ; If numCharsInputted value = 1 and char is + or -, first char is valid but no valid number was inputted. Else, input is valid.
 00000204  83 FB 01		    CMP     EBX, 1
 00000207  74 EA		    JE      _stringInvalid
				   
				   ; First character is valid and/or there is more than one character.
 00000209			_firstCharValid:
				    ; Assess first character outside of loop. 
				    ; If plus sign or minus sign, we don't have to convert to its SDWORD value. Go to next character
 00000209  3C 2B		    CMP     AL, PLUS_SIGN_ASCII
 0000020B  74 1D		    JE      _loopPreconditions

				    ; If first char is a minus sign, then set isNegativeNum. 
 0000020D  3C 2D		    CMP     AL, MINUS_SIGN_ASCII
				    ; Else, first character is a digit, process this number outside of loop.
 0000020F  75 10		    JNE      _firstCharIsDigit

 00000211  56			    PUSH    ESI
 00000212  57			    PUSH    EDI
				    ; [EBP + 40] = isNegativeNum variable address
 00000213  8B 7D 28		    MOV     EDI, [EBP + 40]
 00000216  BE 00000001		    MOV     ESI, 1
				    ; Set isNegativeNum = 1
 0000021B  89 37		    MOV     [EDI], ESI
 0000021D  5F			    POP     EDI
 0000021E  5E			    POP     ESI
 0000021F  EB 09		    JMP     _loopPreconditions

				  ; Else, first char is a digit. Need to take it into account outside of loop for conversion to an int
				  ; Since userInputNumericVal starts up building from 0, the variable will always be set equal to whatever the first digit is. (10* 0 + (ascii code - 48))
 00000221			_firstCharIsDigit:
 00000221  56			    PUSH    ESI
				    ;[EBP + 36] = userInputNumericVal address, save address in ESI
 00000222  8B 75 24		    MOV     ESI, [EBP + 36]
				    ; Convert from ASCII to integer
 00000225  2C 30		    SUB     AL, 48
 00000227  89 06		    MOV     [ESI], EAX
 00000229  5E			    POP     ESI

				    ; Set loop counters based on the number of characters inputted.
 0000022A			_loopPreconditions:
 0000022A  56			    PUSH    ESI
				    ; [EBP + 20] = numCharsInputted Data address
 0000022B  8B 75 14		    MOV     ESI, [EBP + 20]
 0000022E  8B 0E		    MOV     ECX, [ESI]
				    ; ECX should always start off at numCharsInputted - 1 as first character already accounted for above.
 00000230  49			    DEC     ECX
 00000231  8B 1E		    MOV     EBX, [ESI]
				    ; Restore ESI (to point to the next character to evaluate in user string). No longer need numCharsInputted
 00000233  5E			    POP     ESI

				    ; If EBX holds the numCharsInputted value. If numCharsInputted = 1, then skip loop as integer is single digit.
 00000234  83 FB 01		    CMP     EBX, 1
 00000237  74 2D		    JE      _skipLoop
				    
				    ; If numCharsInputted >= 10, loop to second to last character digit to determine if final digit will fit in a 32 bit reg
 00000239  83 FB 0A		    CMP     EBX, 10
 0000023C  7C 01		    JL      _startLoop
				    ; Loop up to second to last digit 
 0000023E  49			    DEC     ECX
				    
 0000023F			_startLoop:
 0000023F  AC			    LODSB
				    ; precondition to first check that current char is a digit. Break out and display error if not. 
				    ; If AL val < 48 (0), current char is invalid, else check if val > 57 (9)
 00000240  3C 30		    CMP AL, ZERO_ASCII
 00000242  7C AF		    JL  _stringInvalid

				    ; If AL val > NINE_ASCII, then current char is invalid
 00000244  3C 39		    CMP AL, NINE_ASCII
 00000246  7F AB		    JG _stringInvalid

				    ;  Formula: userNumericVal = 10 * userNumericVal + (ASCII CODE - 48)
 00000248  56			    PUSH    ESI
 00000249  57			    PUSH    EDI
 0000024A  53			    PUSH    EBX

				    ; [EBP + 36] = userNumericVal address, save address in ESI
 0000024B  8B 75 24		    MOV     ESI, [EBP + 36]
				    ; Move current userNumericVal immediate val into EDI
 0000024E  8B 3E		    MOV     EDI, [ESI]
				    ; Move 10 into EAX to prep 10*userNumericVal (this move replaces old ASCII value in EAX, must restore before using ASCII val again)
 00000250  50			    PUSH    EAX
 00000251  B8 0000000A		    MOV     EAX, 10
				    ; Result in EAX
 00000256  F7 E7		    MUL     EDI
				    ; Save 10*userNumericVal from EAX to EBX
 00000258  8B D8		    MOV     EBX, EAX
				    ; Current character's ASCII code - 48. Restore EAX first
 0000025A  58			    POP     EAX
 0000025B  2C 30		    SUB     AL, 48
				    ; Final result in EBX, output this value in userNumericVal
 0000025D  03 D8		    ADD     EBX, EAX
 0000025F  89 1E		    MOV     [ESI], EBX
 00000261  5B			    POP     EBX
 00000262  5F			    POP     EDI
 00000263  5E			    POP     ESI

 00000264  E2 D9		    LOOP    _startLoop

				    ; Jumped to here when numCharsInputted is 1.
 00000266			_skipLoop:
				    ; userNumericVal always first computed as positive value. Convert to negative integer if user inputted negative value here
 00000266  56			    PUSH    ESI
				    ; [EBP + 40] = isNegativeNum address
 00000267  8B 75 28		    MOV     ESI, [EBP + 40]
 0000026A  8B 1E		    MOV     EBX, [ESI]
				    ; Restore ESI, as we've obtained isNegativeNum value already
 0000026C  5E			    POP     ESI
				    
				    ; If isNegativeNum is negative, negate userNumericVal. Else skip negating
 0000026D  83 FB 00		    CMP     EBX, POSITIVE
 00000270  74 0B		    JE      _skipNegating
				    ; Negate running value in userNumericVal
 00000272  57			    PUSH    EDI
				    ; Move userNumericVal address into EDI
 00000273  8B 7D 24		    MOV     EDI, [EBP + 36]
				    ; Move [EDI] value into EBX, negate EBX, then store negated EBX value in EDI
 00000276  8B 1F		    MOV     EBX, [EDI]
 00000278  F7 DB		    NEG     EBX
 0000027A  89 1F		    MOV     [EDI], EBX
				    ; EDI only gets pushed when we need to negate, so only pop in negation block
 0000027C  5F			    POP     EDI

 0000027D			_skipNegating:
				    ; Next compare numOfCharsInputted by user >= 10 to check if final value fits in 32 bit reg.
				    ; Skip and exit procedure if < 10
 0000027D  56			    PUSH    ESI
				    ; [EBP + 20] = numOfCharsInputted
 0000027E  8B 75 14		    MOV     ESI, [EBP + 20]
 00000281  8B 1E		    MOV     EBX, [ESI]
				    ; ESI address value extracted and no longer needed
 00000283  5E			    POP     ESI
				    ; Exit procedure if numCharsInputted < 10 as these numbers will always fit in 32 bit reg
 00000284  83 FB 0A		    CMP     EBX, 10
 00000287  7C 41		    JL      _exitProcedure
				    ; Else compute last digit on its own. 
 00000289  AC			    LODSB
				    ; Precondition to first check that last char is a digit. Break out and display error if not. 
				    ; If AL val < 48 (0), current char is invalid, else check if val > 57 (9)
 0000028A  3C 30		    CMP AL, ZERO_ASCII
 0000028C  0F 8C FFFFFF61	    JL  _stringInvalid

				    ; If AL val > NINE_ASCII, then current char is invalid
 00000292  3C 39		    CMP AL, NINE_ASCII
 00000294  0F 8F FFFFFF59	    JG _stringInvalid

				    ;  Formula: userNumericVal = 10 * userNumericVal + (ASCII CODE - 48)
 0000029A  56			    PUSH    ESI
 0000029B  57			    PUSH    EDI
 0000029C  53			    PUSH    EBX

				    ; [EBP + 36] = userNumericVal address, save address in ESI
 0000029D  8B 75 24		    MOV     ESI, [EBP + 36]
				    ; Move current userNumericVal immediate val into EDI
 000002A0  8B 3E		    MOV     EDI, [ESI]
				    ; Move 10 into EAX to prep 10*userNumericVal (this move replaces old ASCII value in EAX, must restore before using ASCII val again)
 000002A2  50			    PUSH    EAX
 000002A3  B8 0000000A		    MOV     EAX, 10
				    ; Result in EAX
 000002A8  F7 EF		    IMUL     EDI
				    ; If overflow flag is set, then number is too big for 32 bit. Ask for another number.
 000002AA  70 31		    JO      _overflowAtMultiplication

				    ; Else Save 10*userNumericVal from EAX to EBX
 000002AC  8B D8		    MOV     EBX, EAX
				    ; Current character's ASCII code - 48. Restore EAX first
 000002AE  58			    POP     EAX
 000002AF  2C 30		    SUB     AL, 48

				    ; Determine if last digit (currently in AL) needs to be added or subtracted (is userNumericVal negative or positive?)
 000002B1  56			    PUSH    ESI
 000002B2  57			    PUSH    EDI
				    ; [EBP + 40] = isNegativeNum boolean
 000002B3  8B 75 28		    MOV     ESI, [EBP + 40]
 000002B6  8B 3E		    MOV     EDI, [ESI]
 000002B8  83 FF 00		    CMP     EDI, POSITIVE
 000002BB  74 02		    JE      _skipNegatingLastDigit
 000002BD  F7 D8		    NEG     EAX

 000002BF			_skipNegatingLastDigit:
				    ; Restore registers from line 527
 000002BF  5F			    POP     EDI
 000002C0  5E			    POP     ESI

				    ; Last multiplication operation result was saved in EBX. 
 000002C1  03 D8		    ADD     EBX, EAX
				    ; If addition step triggers overflow flag, number is too big to fit in 32 bit reg. Ask for new input.
 000002C3  70 2B		    JO      _overflowAtAddition
				    ; Else save final value in userNumericVal
 000002C5  89 1E		    MOV     [ESI], EBX
 000002C7  5B			    POP     EBX
 000002C8  5F			    POP     EDI
 000002C9  5E			    POP     ESI

 000002CA			_exitProcedure: 
				    ; Reset isNegativeNum to 0, it's original parameter value before procedure exit.
 000002CA  8B 75 28		    MOV     ESI, [EBP + 40]
 000002CD  BB 00000000		    MOV     EBX, 0
 000002D2  89 1E		    MOV     [ESI], EBX

				    ; Clean up stack from inital registers saved at start of procedure.
 000002D4  5E			    POP     ESI
 000002D5  5A			    POP     EDX
 000002D6  59			    POP     ECX
 000002D7  5B			    POP     EBX
 000002D8  58			    POP     EAX
 000002D9  5D			    POP     EBP
 000002DA  C2 0024		    RET     36

 000002DD			_overflowAtMultiplication:
				    ; Realign stack before asking for a new input.
 000002DD  58			    POP     EAX
 000002DE  5B			    POP     EBX
 000002DF  5F			    POP     EDI
 000002E0  5E			    POP     ESI
				    mDisplayString  [EBP + 44]
 000002E1  52		     1	    PUSH    EDX
 000002E2  8B 55 2C	     1	    MOV     EDX, [EBP + 44]
 000002E5  E8 00000000 E     1	    CALL    WriteString
 000002EA  5A		     1	    POP     EDX
 000002EB  E9 FFFFFE93		    JMP     _getString

 000002F0			_overflowAtAddition:
				    ; Realign stack before asking for a new input.
 000002F0  5B			    POP     EBX
 000002F1  5F			    POP     EDI
 000002F2  5E			    POP     ESI
				    mDisplayString [EBP + 44]
 000002F3  52		     1	    PUSH    EDX
 000002F4  8B 55 2C	     1	    MOV     EDX, [EBP + 44]
 000002F7  E8 00000000 E     1	    CALL    WriteString
 000002FC  5A		     1	    POP     EDX
 000002FD  E9 FFFFFE81		    JMP     _getString

 00000302			ReadVal ENDP


				; --------------------------------------------------------------------------------------------------
				; Name: calculateSum
				; 
				; Calculates the total sum of the values in userIntegersArray. 
				;
				; Preconditions: Requires that userIntegersArray is filled with 10 integers by calling ReadVal multiple times.
				;
				; Receives:
				;       [EBP + 12] = totalSum data adress. Used as an input/output parameter to store the total sum of the integers in userIntegersArray
				;       [EBP + 8] = userIntegersArray address. Used as an input parameter to extract the values in the array to calculate the sum.
				;
				; Returns:
				;       totalSum: upon procedure return, the total sum of the values in the userIntegersArray is stored in this variable.
				;
				; --------------------------------------------------------------------------------------------------
 00000302			calculateSum    PROC
 00000302  55			    PUSH    EBP
 00000303  8B EC		    MOV     EBP, ESP

				    ; Save used registers
 00000305  56			    PUSH    ESI
 00000306  57			    PUSH    EDI
 00000307  51			    PUSH    ECX
 00000308  53			    PUSH    EBX
 00000309  50			    PUSH    EAX

				    ; LOOP PRECONDITIONS
				    ; Move array address into ESI (array address at [EBP + 8]
 0000030A  8B 75 08		    MOV     ESI, [EBP + 8]
				    ; Move totalSum data variable address into EDI
 0000030D  8B 7D 0C		    MOV     EDI, [EBP + 12]
				    ; Loop 10 times for 10 integers in array
 00000310  B9 0000000A		    MOV     ECX, 10

 00000315			_startLoop:
				    ; Move current array immediate val into EBX
 00000315  8B 1E		    MOV     EBX, [ESI]
				    ; Extract current running sum into EDX
 00000317  8B 07		    MOV     EAX, [EDI]
				    ; Add array immediate to current running sum. Must be current running sum + array value as array value could be negative
 00000319  03 C3		    ADD     EAX, EBX
				    ; Restore new sum into [EDI], which points to running sum address
 0000031B  89 07		    MOV     [EDI], EAX
				    ; Increment array pointer by SDWORD type = 4
 0000031D  83 C6 04		    ADD     ESI, 4
				       
 00000320  E2 F3		    LOOP _startLoop

				    ; Restore registers before procedure return
 00000322  58			    POP     EAX
 00000323  5B			    POP     EBX
 00000324  59			    POP     ECX
 00000325  5F			    POP     EDI
 00000326  5E			    POP     ESI
 00000327  5D			    POP     EBP
 00000328  C2 0008		    RET     8

 0000032B			calculateSum    ENDP

				; --------------------------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; WriteVal takes an immediate integer value as a parameter, converts that value into its string representation,
				; and outputs that string representation to the terminal. The procedure breaks down the integer value starting
				; from the ones place and moves left to higher powers. Thus, the string representation is written in reverse into
				; the output (writevalOutputString). 
				;
				; Preconditions: writevalOutputString should be initially declared in the data section as an 11 element byte array filled with 0's
				;
				;
				; Receives:
				;       [EBP + 20] =  SIZEOF writevalOutputString. 
				;       [EBP + 16] = isNegativeNum address. Used as a boolean to track if the passed value to convert is negative
				;       [EBP + 12] = writevalOutputString address. Output parameter where the final string representation
				;                   of the integer to be converted will be stored.
				;       [EBP + 8] = an immediate SDWORD value to convert to its string representation
				;       MINUS_SIGN_ASCII and POSITIVE, global constants
				;
				; Returns:
				;       writevalOutputString: modified and not restored. Towards end of the procedure, mDisplayString is used
				;       to display the string that WriteVal outputted to writevalOutputString. Upon procedure return, writevalOutputString is not restored.
				; --------------------------------------------------------------------------------------------------
 0000032B			WriteVal    PROC
 0000032B  55			    PUSH    EBP
 0000032C  8B EC		    MOV     EBP, ESP

				    ; Save used registers
 0000032E  56			    PUSH    ESI
 0000032F  50			    PUSH    EAX
 00000330  53			    PUSH    EBX
 00000331  52			    PUSH    EDX
 00000332  57			    PUSH    EDI

				    ; Determine if passed integer (immediate) [EBP + 8] to convert to string is negative. If negative, convert to positive for easier processing
 00000333  8B 45 08		    MOV     EAX, [EBP + 8]      ; EAX contains starting dividend for loop at this line
 00000336  83 F8 00		    CMP     EAX, 0
 00000339  79 2A		    JNS     _loopPreconditions
				    ; Convert to positive number and set isNegativeNum to true (1)
 0000033B  F7 D8		    NEG     EAX
				    ; Set isNegativeNum to 1
 0000033D  8B 75 10		    MOV     ESI, [EBP + 16]
 00000340  BB 00000001		    MOV     EBX, 1
 00000345  89 1E		    MOV     [ESI], EBX
				    ; ESI and EBX register current values not needed after here. 

				    ; Also check if passed integer is minimum value in 32 bit register (-2,147,483,648) edge case (negating will cause overflow only for this input)
 00000347  71 1C		    JNO     _loopPreconditions
				    ; Address edge case by processing last digit individually, outside of loop. 
				    ; INC EAX to -2147483647 so we can negate without an overflow
 00000349  40			    INC     EAX
 0000034A  F7 D8		    NEG     EAX

				    ; Point EDI to second to last element in userInputStringVal. Last BYTE will always be null term 0. Loop will insert bytes in reverse starting at 10th element
 0000034C  8B 7D 0C		    MOV     EDI, [EBP + 12]
 0000034F  83 C7 09		    ADD     EDI, 9

				    ; Clear EDX
 00000352  99			    CDQ
				    ; Divisor always 10
 00000353  BB 0000000A		    MOV     EBX, 10
 00000358  F7 FB		    IDIV    EBX

				    ; Remainder in EDX, = the furthest right digit from dividend
				    ; Convert value in remainder to its corresponding ASCII code. +49 for this case because we want original number 8 not 7.
 0000035A  83 C2 31		    ADD     EDX, 49

 0000035D  50			    PUSH    EAX
 0000035E  8B C2		    MOV     EAX, EDX
 00000360  FD			    STD
 00000361  AA			    STOSB
 00000362  58			    POP     EAX
				    ; Skip non-edge case loopPreconditions, as preconditions already established at beginning of edge case block above
 00000363  EB 06		    JMP     _startLoop
				    
 00000365			_loopPreconditions:
				    ; Point EDI to second to last element in userInputStringVal. Last BYTE will always be null term 0. Loop will insert bytes in reverse starting at 10th element
 00000365  8B 7D 0C		    MOV     EDI, [EBP + 12]
 00000368  83 C7 09		    ADD     EDI, 9

				    ; Use post-test loop to sequentially divide integer. Append ASCII codes to output string in REVERSE. 
 0000036B			_startLoop:
				    ; Clear EDX
 0000036B  99			    CDQ
				    ; Divisor always 10
 0000036C  BB 0000000A		    MOV     EBX, 10
 00000371  F7 FB		    IDIV    EBX

				    ; Remainder in EDX, = the furthest right digit from dividend
				    ; Convert value in remainder to its corresponding ASCII code.
 00000373  83 C2 30		    ADD     EDX, 48

 00000376  50			    PUSH    EAX
 00000377  8B C2		    MOV     EAX, EDX
 00000379  FD			    STD
 0000037A  AA			    STOSB
 0000037B  58			    POP     EAX

				     ; Post test will CMP EAX, 0 after dividing. If quotient (EAX) = 0, then we've processed the last digit and done
 0000037C  83 F8 00		    CMP     EAX, 0
 0000037F  75 EA		    JNZ     _startLoop

				    ; At end of loop, need to check isNegativeNum variable. If negative, we need to add final MINUS SIGN ascii to beginning of string
 00000381  8B 75 10		    MOV     ESI, [EBP + 16]
 00000384  8B 1E		    MOV     EBX, [ESI]
 00000386  83 FB 00		    CMP     EBX, POSITIVE
 00000389  74 06		    JE      _exitProcedure
				    ; Add minus sign ascii
 0000038B  B8 0000002D		    MOV     EAX, MINUS_SIGN_ASCII
 00000390  AA			    STOSB

 00000391			_exitProcedure:
				    ; Reset isNegativeNum Variable to 0 as it originally was
 00000391  BB 00000000		    MOV     EBX, 0
 00000396  89 1E		    MOV     [ESI], EBX

				    ; Increment EDI pointer by 1 byte to point to first ASCII character, as last STOSB decremented EDI. 
 00000398  83 C7 01		    ADD     EDI, 1

				    ; EDI holds address of first address 
				    mDisplayString EDI
 0000039B  52		     1	    PUSH    EDX
 0000039C  8B D7	     1	    MOV     EDX, EDI
 0000039E  E8 00000000 E     1	    CALL    WriteString
 000003A3  5A		     1	    POP     EDX

 000003A4  5F			    POP    EDI
 000003A5  5A			    POP    EDX
 000003A6  5B			    POP    EBX
 000003A7  58			    POP    EAX
 000003A8  5E			    POP    ESI
 000003A9  5D			    POP    EBP
 000003AA  C2 0010		    RET     16

 000003AD			WriteVal    ENDP

				; --------------------------------------------------------------------------------------------------
				; Name: calculateRoundedAverage
				;
				; Calculates the rounded average of the integers obtained from ReadVal being called 10 times.
				;
				; Preconditions: Requires that totalSum be calculated already. 
				; 
				; Receives:
				;       [EBP + 12] = totalSum data address. Used as input to calculate rounded average.
				;       [EBP + 8] = roundedAverageInt output parameter address. 
				;
				; Returns:
				;       roundedAverageInt: the calculated rounded average is stored in this variable.
				;
				; --------------------------------------------------------------------------------------------------
 000003AD			calculateRoundedAverage     PROC
 000003AD  55			    PUSH    EBP
 000003AE  8B EC		    MOV     EBP, ESP

 000003B0  50			    PUSH    EAX
 000003B1  52			    PUSH    EDX
 000003B2  53			    PUSH    EBX
 000003B3  56			    PUSH    ESI
 000003B4  57			    PUSH    EDI

				    ; [EBP + 8] = roundedAverage SDWORD address
 000003B5  8B 7D 08		    MOV     EDI, [EBP + 8]

				    ; [EBP + 12] = totalSum Address, the dividend
 000003B8  8B 75 0C		    MOV     ESI, [EBP + 12]
 000003BB  8B 06		    MOV     EAX, [ESI]

				    ; Dividend = 10 for 10 total integers
 000003BD  BB 0000000A		    MOV     EBX, 10

				    ; Clear EDX
 000003C2  99			    CDQ
 000003C3  F7 FB		    IDIV    EBX
				    
				    ; Quotient in EAX. Save result in roundedAverage variable
 000003C5  89 07		    MOV     [EDI], EAX

				    ; Restore registers
 000003C7  5F			    POP     EDI
 000003C8  5E			    POP     ESI
 000003C9  5B			    POP     EBX
 000003CA  5A			    POP     EDX
 000003CB  58			    POP     EAX
 000003CC  5D			    POP     EBP
 000003CD  C2 0008		    RET     8

 000003D0			calculateRoundedAverage     ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29913.0	    06/06/21 02:48:31
"Project 6     (Proj6_pantojaj.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000310 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003D0 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 0000017B _TEXT	Length= 00000187 Public STDCALL
  _getString . . . . . . . . . .	L Near	 00000183 _TEXT	
  _checkForNullString  . . . . .	L Near	 000001CD _TEXT	
  _checkForValidFirstChar  . . .	L Near	 000001DE _TEXT	
  _stringInvalid . . . . . . . .	L Near	 000001F3 _TEXT	
  _checkMoreThanOneChar  . . . .	L Near	 000001FF _TEXT	
  _firstCharValid  . . . . . . .	L Near	 00000209 _TEXT	
  _firstCharIsDigit  . . . . . .	L Near	 00000221 _TEXT	
  _loopPreconditions . . . . . .	L Near	 0000022A _TEXT	
  _startLoop . . . . . . . . . .	L Near	 0000023F _TEXT	
  _skipLoop  . . . . . . . . . .	L Near	 00000266 _TEXT	
  _skipNegating  . . . . . . . .	L Near	 0000027D _TEXT	
  _skipNegatingLastDigit . . . .	L Near	 000002BF _TEXT	
  _exitProcedure . . . . . . . .	L Near	 000002CA _TEXT	
  _overflowAtMultiplication  . .	L Near	 000002DD _TEXT	
  _overflowAtAddition  . . . . .	L Near	 000002F0 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000032B _TEXT	Length= 00000082 Public STDCALL
  _loopPreconditions . . . . . .	L Near	 00000365 _TEXT	
  _startLoop . . . . . . . . . .	L Near	 0000036B _TEXT	
  _exitProcedure . . . . . . . .	L Near	 00000391 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calculateRoundedAverage  . . . .	P Near	 000003AD _TEXT	Length= 00000023 Public STDCALL
calculateSum . . . . . . . . . .	P Near	 00000302 _TEXT	Length= 00000029 Public STDCALL
  _startLoop . . . . . . . . . .	L Near	 00000315 _TEXT	
introduction . . . . . . . . . .	P Near	 0000014C _TEXT	Length= 0000002F Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000014C Public STDCALL
  _getIntegers . . . . . . . . .	L Near	 00000023 _TEXT	
  _displayIntsAsStrings  . . . .	L Near	 00000093 _TEXT	
  _writevalLoopInstruction . . .	L Near	 000000C4 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_CHARS_ALLOWED  . . . . . . .	Number	 0000000Bh   
MAX_STRING_LENGTH  . . . . . . .	Number	 0000000Dh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MINUS_SIGN_ASCII . . . . . . . .	Number	 0000002Dh   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NEGATIVE . . . . . . . . . . . .	Number	 00000001h   
NINE_ASCII . . . . . . . . . . .	Number	 00000039h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PLUS_SIGN_ASCII  . . . . . . . .	Number	 0000002Bh   
POSITIVE . . . . . . . . . . . .	Number	 00000000h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
ZERO_ASCII . . . . . . . . . . .	Number	 00000030h   
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
commaCounter . . . . . . . . . .	Byte	 000002DF _DATA	
commaSpacing . . . . . . . . . .	Byte	 00000263 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewellStr  . . . . . . . . . .	Byte	 00000266 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
header1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
header2  . . . . . . . . . . . .	Byte	 0000003F _DATA	
header3  . . . . . . . . . . . .	Byte	 0000005D _DATA	
header4  . . . . . . . . . . . .	Byte	 000000B1 _DATA	
invalidCharAmount2 . . . . . . .	Byte	 00000192 _DATA	
invalidCharAmount  . . . . . . .	Byte	 0000015D _DATA	
invalidIntStr  . . . . . . . . .	Byte	 000001C8 _DATA	
isNegativeNum  . . . . . . . . .	DWord	 000002CC _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numCharsInputted . . . . . . . .	DWord	 000002B7 _DATA	
numbersInputtedStr . . . . . . .	Byte	 00000207 _DATA	
overflowString . . . . . . . . .	Byte	 0000027A _DATA	
promptUser . . . . . . . . . . .	Byte	 0000013E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
roundedAverageInt  . . . . . . .	DWord	 000002E0 _DATA	
roundedAverageStr  . . . . . . .	Byte	 0000024A _DATA	
sumOfNumbersStr  . . . . . . . .	Byte	 0000022C _DATA	
totalSum . . . . . . . . . . . .	DWord	 000002D0 _DATA	
userInputNumericVal  . . . . . .	DWord	 000002C8 _DATA	
userInputString  . . . . . . . .	Byte	 000002BB _DATA	
userIntegersArray  . . . . . . .	DWord	 000002E4 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
writevalOutputString . . . . . .	Byte	 000002D4 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
